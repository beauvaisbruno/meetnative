// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormUi 1`] = `
<Styled(ViewNB)>
  <Styled(ViewNB)
    padder={true}
  >
    <Styled(Item)
      stackedLabel={true}
    >
      <Styled(Label)>
        Email
      </Styled(Label)>
      <Styled(Input)
        onBlur={[Function]}
        onChangeText={[MockFunction]}
        value=""
      />
    </Styled(Item)>
  </Styled(ViewNB)>
  <Styled(ViewNB)
    padder={true}
  >
    <Styled(Item)
      stackedLabel={true}
    >
      <Styled(Label)>
        Password
      </Styled(Label)>
      <Styled(Input)
        onBlur={[Function]}
        onChangeText={[MockFunction]}
        secureTextEntry={true}
        value=""
      />
    </Styled(Item)>
  </Styled(ViewNB)>
  <Styled(ViewNB)
    padder={true}
  >
    <Styled(Button)
      block={true}
      onPress={[Function]}
      rounded={true}
      success={true}
      testID="signinBtn"
    >
      <Styled(Icon)
        color="white"
        fontSize={30}
        name="ios-mail"
      />
      <Styled(Text)>
        Login
      </Styled(Text)>
    </Styled(Button)>
  </Styled(ViewNB)>
  <Styled(Button)
    block={true}
    onPress={[Function]}
    testID="forgottenBtn"
    transparent={true}
  >
    <Styled(Text)>
      Forgotten password
    </Styled(Text)>
  </Styled(Button)>
</Styled(ViewNB)>
`;

exports[`FormUi 2`] = `
<Styled(ViewNB)>
  <Styled(ViewNB)
    padder={true}
  >
    <Styled(Item)
      stackedLabel={true}
    >
      <Styled(Label)>
        Email
      </Styled(Label)>
      <Styled(Input)
        onBlur={[Function]}
        onChangeText={[MockFunction]}
        value=""
      />
    </Styled(Item)>
  </Styled(ViewNB)>
  <Styled(ViewNB)
    padder={true}
  >
    <Styled(Item)
      stackedLabel={true}
    >
      <Styled(Label)>
        Password
      </Styled(Label)>
      <Styled(Input)
        onBlur={[Function]}
        onChangeText={[MockFunction]}
        secureTextEntry={true}
        value=""
      />
    </Styled(Item)>
  </Styled(ViewNB)>
  <Styled(ViewNB)
    padder={true}
  >
    <Styled(Button)
      block={true}
      onPress={[Function]}
      rounded={true}
      success={true}
      testID="signinBtn"
    >
      <Component />
      <Styled(Icon)
        color="white"
        fontSize={30}
        name="spinner"
        type="EvilIcons"
      />
      <Styled(Text)>
        Login
      </Styled(Text)>
    </Styled(Button)>
  </Styled(ViewNB)>
  <Styled(Button)
    block={true}
    onPress={[Function]}
    testID="forgottenBtn"
    transparent={true}
  >
    <Styled(Text)>
      Forgotten password
    </Styled(Text)>
  </Styled(Button)>
</Styled(ViewNB)>
`;

exports[`FormUi 3`] = `
<Styled(ViewNB)>
  <Styled(ViewNB)
    padder={true}
  >
    <Styled(Item)
      error={true}
      stackedLabel={true}
      success={false}
    >
      <Styled(Label)>
        Email
      </Styled(Label)>
      <Styled(Input)
        onBlur={[Function]}
        onChangeText={[MockFunction]}
        value=""
      />
    </Styled(Item)>
    <Styled(Text)
      style={
        Object {
          "color": "#d9534f",
        }
      }
    >
      error message
    </Styled(Text)>
  </Styled(ViewNB)>
  <Styled(ViewNB)
    padder={true}
  >
    <Styled(Item)
      stackedLabel={true}
      success={false}
    >
      <Styled(Label)>
        Password
      </Styled(Label)>
      <Styled(Input)
        onBlur={[Function]}
        onChangeText={[MockFunction]}
        secureTextEntry={true}
        value=""
      />
    </Styled(Item)>
  </Styled(ViewNB)>
  <Styled(ViewNB)
    padder={true}
  >
    <Styled(Button)
      block={true}
      onPress={[Function]}
      rounded={true}
      success={true}
      testID="signinBtn"
    >
      <Component />
      <Styled(Icon)
        color="white"
        fontSize={30}
        name="spinner"
        type="EvilIcons"
      />
      <Styled(Text)>
        Login
      </Styled(Text)>
    </Styled(Button)>
  </Styled(ViewNB)>
  <Styled(Button)
    block={true}
    onPress={[Function]}
    testID="forgottenBtn"
    transparent={true}
  >
    <Styled(Text)>
      Forgotten password
    </Styled(Text)>
  </Styled(Button)>
</Styled(ViewNB)>
`;

exports[`FormUi 4`] = `
<Styled(ViewNB)>
  <Styled(ViewNB)
    padder={true}
  >
    <Styled(Item)
      stackedLabel={true}
    >
      <Styled(Label)>
        Email
      </Styled(Label)>
      <Styled(Input)
        onBlur={[Function]}
        onChangeText={[MockFunction]}
        value=""
      />
    </Styled(Item)>
  </Styled(ViewNB)>
  <Styled(ViewNB)
    padder={true}
  >
    <Styled(Item)
      error={true}
      stackedLabel={true}
    >
      <Styled(Label)>
        Password
      </Styled(Label)>
      <Styled(Input)
        onBlur={[Function]}
        onChangeText={[MockFunction]}
        secureTextEntry={true}
        value=""
      />
    </Styled(Item)>
    <Styled(Text)
      style={
        Object {
          "color": "#d9534f",
        }
      }
    >
      error message
    </Styled(Text)>
  </Styled(ViewNB)>
  <Styled(ViewNB)
    padder={true}
  >
    <Styled(Button)
      block={true}
      onPress={[Function]}
      rounded={true}
      success={true}
      testID="signinBtn"
    >
      <Component />
      <Styled(Icon)
        color="white"
        fontSize={30}
        name="spinner"
        type="EvilIcons"
      />
      <Styled(Text)>
        Login
      </Styled(Text)>
    </Styled(Button)>
  </Styled(ViewNB)>
  <Styled(Button)
    block={true}
    onPress={[Function]}
    testID="forgottenBtn"
    transparent={true}
  >
    <Styled(Text)>
      Forgotten password
    </Styled(Text)>
  </Styled(Button)>
</Styled(ViewNB)>
`;

exports[`Formik wrapper 1`] = `
<Styled(ViewNB)>
  <Styled(ViewNB)
    padder={true}
  >
    <Styled(Button)
      block={true}
      onPress={[Function]}
      rounded={true}
      success={true}
      testID="formVisibleBtn"
    >
      <Styled(Icon)
        fontSize={30}
        name="ios-mail"
      />
      <Styled(Text)>
        Login with your email
      </Styled(Text)>
    </Styled(Button)>
  </Styled(ViewNB)>
</Styled(ViewNB)>
`;

exports[`Formik wrapper 2`] = `
<Styled(ViewNB)>
  <Formik
    enableReinitialize={true}
    initialValues={
      Object {
        "connection": undefined,
        "email": "getParamValue",
        "password": "",
      }
    }
    isInitialValid={false}
    onSubmit={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": false,
        "_nodes": Array [
          "password",
          "email",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "email": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "required": false,
              "undefined": false,
            },
            "_mutate": false,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
          "password": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "min": true,
              "required": false,
            },
            "_mutate": false,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
      }
    }
  >
    <Component />
  </Formik>
  <Component />
</Styled(ViewNB)>
`;
